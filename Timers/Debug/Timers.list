
Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d48  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000e78  08000e78  00010e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ebc  08000ebc  00010ec4  2**0
                  CONTENTS
  4 .ARM          00000000  08000ebc  08000ebc  00010ec4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ebc  08000ec4  00010ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ebc  08000ebc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000000  08000ec4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08000ec4  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ec4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010eed  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004c7d  00000000  00000000  00010f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d0c  00000000  00000000  00015bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0000100c  00000000  00000000  000168b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002b0  00000000  00000000  000178c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000228  00000000  00000000  00017b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000008eb  00000000  00000000  00017da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003423  00000000  00000000  0001868b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006cb5  00000000  00000000  0001baae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000008f8  00000000  00000000  00022764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e60 	.word	0x08000e60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e60 	.word	0x08000e60

08000170 <EN_PULS>:
#include "LCD.h"
	PIN_config PIN_C;

void EN_PULS(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_HIGH);
 8000174:	2201      	movs	r2, #1
 8000176:	2101      	movs	r1, #1
 8000178:	4806      	ldr	r0, [pc, #24]	; (8000194 <EN_PULS+0x24>)
 800017a:	f000 fb7d 	bl	8000878 <MCAL_write_PIN>
	dms(1);
 800017e:	2001      	movs	r0, #1
 8000180:	f000 fc2e 	bl	80009e0 <dms>
	MCAL_write_PIN(CTRL_PORT, EN, LOGIC_LOW);
 8000184:	2200      	movs	r2, #0
 8000186:	2101      	movs	r1, #1
 8000188:	4802      	ldr	r0, [pc, #8]	; (8000194 <EN_PULS+0x24>)
 800018a:	f000 fb75 	bl	8000878 <MCAL_write_PIN>

}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40010800 	.word	0x40010800

08000198 <LCD_sendCommand>:

void LCD_sendCommand(usint8_t command){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_LOW);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2100      	movs	r1, #0
 80001a6:	4830      	ldr	r0, [pc, #192]	; (8000268 <LCD_sendCommand+0xd0>)
 80001a8:	f000 fb66 	bl	8000878 <MCAL_write_PIN>
	dms(1);
 80001ac:	2001      	movs	r0, #1
 80001ae:	f000 fc17 	bl	80009e0 <dms>
	dus(1);

	EN_PULS();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,4));
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	091b      	lsrs	r3, r3, #4
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	f003 0301 	and.w	r3, r3, #1
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	461a      	mov	r2, r3
 80001c0:	2102      	movs	r1, #2
 80001c2:	4829      	ldr	r0, [pc, #164]	; (8000268 <LCD_sendCommand+0xd0>)
 80001c4:	f000 fb58 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,5));
 80001c8:	79fb      	ldrb	r3, [r7, #7]
 80001ca:	095b      	lsrs	r3, r3, #5
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	f003 0301 	and.w	r3, r3, #1
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	461a      	mov	r2, r3
 80001d6:	2103      	movs	r1, #3
 80001d8:	4823      	ldr	r0, [pc, #140]	; (8000268 <LCD_sendCommand+0xd0>)
 80001da:	f000 fb4d 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,6));
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	f003 0301 	and.w	r3, r3, #1
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	461a      	mov	r2, r3
 80001ec:	2104      	movs	r1, #4
 80001ee:	481e      	ldr	r0, [pc, #120]	; (8000268 <LCD_sendCommand+0xd0>)
 80001f0:	f000 fb42 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,7));
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	09db      	lsrs	r3, r3, #7
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	461a      	mov	r2, r3
 80001fc:	2105      	movs	r1, #5
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <LCD_sendCommand+0xd0>)
 8000200:	f000 fb3a 	bl	8000878 <MCAL_write_PIN>
	EN_PULS();
 8000204:	f7ff ffb4 	bl	8000170 <EN_PULS>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(command,0));
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	b2db      	uxtb	r3, r3
 8000210:	461a      	mov	r2, r3
 8000212:	2102      	movs	r1, #2
 8000214:	4814      	ldr	r0, [pc, #80]	; (8000268 <LCD_sendCommand+0xd0>)
 8000216:	f000 fb2f 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(command,1));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	085b      	lsrs	r3, r3, #1
 800021e:	b2db      	uxtb	r3, r3
 8000220:	f003 0301 	and.w	r3, r3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	461a      	mov	r2, r3
 8000228:	2103      	movs	r1, #3
 800022a:	480f      	ldr	r0, [pc, #60]	; (8000268 <LCD_sendCommand+0xd0>)
 800022c:	f000 fb24 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(command,2));
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	089b      	lsrs	r3, r3, #2
 8000234:	b2db      	uxtb	r3, r3
 8000236:	f003 0301 	and.w	r3, r3, #1
 800023a:	b2db      	uxtb	r3, r3
 800023c:	461a      	mov	r2, r3
 800023e:	2104      	movs	r1, #4
 8000240:	4809      	ldr	r0, [pc, #36]	; (8000268 <LCD_sendCommand+0xd0>)
 8000242:	f000 fb19 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(command,3));
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	08db      	lsrs	r3, r3, #3
 800024a:	b2db      	uxtb	r3, r3
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	b2db      	uxtb	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	2105      	movs	r1, #5
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <LCD_sendCommand+0xd0>)
 8000258:	f000 fb0e 	bl	8000878 <MCAL_write_PIN>
	EN_PULS();
 800025c:	f7ff ff88 	bl	8000170 <EN_PULS>

#endif

}
 8000260:	bf00      	nop
 8000262:	3708      	adds	r7, #8
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	40010800 	.word	0x40010800

0800026c <LCD_init>:

void LCD_init(){
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	dms(20); // wait until power
 8000270:	2014      	movs	r0, #20
 8000272:	f000 fbb5 	bl	80009e0 <dms>

	// COFIGEUR RS Pin as output OD

		PIN_C.PIN_number=RS;
 8000276:	4b26      	ldr	r3, [pc, #152]	; (8000310 <LCD_init+0xa4>)
 8000278:	2200      	movs	r2, #0
 800027a:	801a      	strh	r2, [r3, #0]
		PIN_C.MODE=OUTPUT_PP;
 800027c:	4b24      	ldr	r3, [pc, #144]	; (8000310 <LCD_init+0xa4>)
 800027e:	2204      	movs	r2, #4
 8000280:	709a      	strb	r2, [r3, #2]
		PIN_C.SPEED=SPEED_2;
 8000282:	4b23      	ldr	r3, [pc, #140]	; (8000310 <LCD_init+0xa4>)
 8000284:	2202      	movs	r2, #2
 8000286:	70da      	strb	r2, [r3, #3]

	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 8000288:	4921      	ldr	r1, [pc, #132]	; (8000310 <LCD_init+0xa4>)
 800028a:	4822      	ldr	r0, [pc, #136]	; (8000314 <LCD_init+0xa8>)
 800028c:	f000 fa0a 	bl	80006a4 <MCAL_GPIO_init>
	// COFIGEUR RW Pin as output OD
	dus(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fb8f 	bl	80009b4 <dus>
//	MCAL_GPIO_init(CTRL_PORT,&PIN_C);

	// COFIGEUR EN Pin as output OD
//	dus(1);

		PIN_C.PIN_number=EN;
 8000296:	4b1e      	ldr	r3, [pc, #120]	; (8000310 <LCD_init+0xa4>)
 8000298:	2201      	movs	r2, #1
 800029a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(CTRL_PORT,&PIN_C);
 800029c:	491c      	ldr	r1, [pc, #112]	; (8000310 <LCD_init+0xa4>)
 800029e:	481d      	ldr	r0, [pc, #116]	; (8000314 <LCD_init+0xa8>)
 80002a0:	f000 fa00 	bl	80006a4 <MCAL_GPIO_init>
	dus(15); // wait until power
 80002a4:	200f      	movs	r0, #15
 80002a6:	f000 fb85 	bl	80009b4 <dus>
	dus(1);

#endif
#ifdef FOUR_BIT_MODE
	/////////////////////////////////////
	PIN_C.MODE=OUTPUT_PP;
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <LCD_init+0xa4>)
 80002ac:	2204      	movs	r2, #4
 80002ae:	709a      	strb	r2, [r3, #2]
	PIN_C.SPEED=SPEED_2;
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <LCD_init+0xa4>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	70da      	strb	r2, [r3, #3]
	/////////////////////////////////////
	PIN_C.PIN_number=D4;
 80002b6:	4b16      	ldr	r3, [pc, #88]	; (8000310 <LCD_init+0xa4>)
 80002b8:	2202      	movs	r2, #2
 80002ba:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80002bc:	4914      	ldr	r1, [pc, #80]	; (8000310 <LCD_init+0xa4>)
 80002be:	4815      	ldr	r0, [pc, #84]	; (8000314 <LCD_init+0xa8>)
 80002c0:	f000 f9f0 	bl	80006a4 <MCAL_GPIO_init>
	PIN_C.PIN_number=D5;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <LCD_init+0xa4>)
 80002c6:	2203      	movs	r2, #3
 80002c8:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80002ca:	4911      	ldr	r1, [pc, #68]	; (8000310 <LCD_init+0xa4>)
 80002cc:	4811      	ldr	r0, [pc, #68]	; (8000314 <LCD_init+0xa8>)
 80002ce:	f000 f9e9 	bl	80006a4 <MCAL_GPIO_init>
	PIN_C.PIN_number=D6;
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <LCD_init+0xa4>)
 80002d4:	2204      	movs	r2, #4
 80002d6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80002d8:	490d      	ldr	r1, [pc, #52]	; (8000310 <LCD_init+0xa4>)
 80002da:	480e      	ldr	r0, [pc, #56]	; (8000314 <LCD_init+0xa8>)
 80002dc:	f000 f9e2 	bl	80006a4 <MCAL_GPIO_init>
	PIN_C.PIN_number=D7;
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <LCD_init+0xa4>)
 80002e2:	2205      	movs	r2, #5
 80002e4:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_init(DATA_PORT,&PIN_C);
 80002e6:	490a      	ldr	r1, [pc, #40]	; (8000310 <LCD_init+0xa4>)
 80002e8:	480a      	ldr	r0, [pc, #40]	; (8000314 <LCD_init+0xa8>)
 80002ea:	f000 f9db 	bl	80006a4 <MCAL_GPIO_init>
	dus(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f000 fb60 	bl	80009b4 <dus>
	LCD_sendCommand(LCD_GO_TO_HOME);
 80002f4:	2002      	movs	r0, #2
 80002f6:	f7ff ff4f 	bl	8000198 <LCD_sendCommand>

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 80002fa:	2028      	movs	r0, #40	; 0x28
 80002fc:	f7ff ff4c 	bl	8000198 <LCD_sendCommand>

	dus(10);
 8000300:	200a      	movs	r0, #10
 8000302:	f000 fb57 	bl	80009b4 <dus>



#endif
	LCD_sendCommand(LCD_CURSOR_ON);
 8000306:	200e      	movs	r0, #14
 8000308:	f7ff ff46 	bl	8000198 <LCD_sendCommand>

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000001c 	.word	0x2000001c
 8000314:	40010800 	.word	0x40010800

08000318 <LCD_clearScreen>:
void LCD_clearScreen(){
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	LCD_sendCommand(LCD_CLEAR_COMMAND);
 800031c:	2001      	movs	r0, #1
 800031e:	f7ff ff3b 	bl	8000198 <LCD_sendCommand>


}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <LCD_sendCharcter>:

void LCD_sendCharcter(usint8_t data){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(CTRL_PORT, RS, LOGIC_HIGH);
 8000332:	2201      	movs	r2, #1
 8000334:	2100      	movs	r1, #0
 8000336:	4830      	ldr	r0, [pc, #192]	; (80003f8 <LCD_sendCharcter+0xd0>)
 8000338:	f000 fa9e 	bl	8000878 <MCAL_write_PIN>
//	MCAL_write_PIN(CTRL_PORT, RW, LOGIC_LOW);

	dus(10);
 800033c:	200a      	movs	r0, #10
 800033e:	f000 fb39 	bl	80009b4 <dus>
	dus(1);

	EN_PULS();
#endif
#ifdef FOUR_BIT_MODE
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(data,4));
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	091b      	lsrs	r3, r3, #4
 8000346:	b2db      	uxtb	r3, r3
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	b2db      	uxtb	r3, r3
 800034e:	461a      	mov	r2, r3
 8000350:	2102      	movs	r1, #2
 8000352:	4829      	ldr	r0, [pc, #164]	; (80003f8 <LCD_sendCharcter+0xd0>)
 8000354:	f000 fa90 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(data,5));
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	095b      	lsrs	r3, r3, #5
 800035c:	b2db      	uxtb	r3, r3
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	b2db      	uxtb	r3, r3
 8000364:	461a      	mov	r2, r3
 8000366:	2103      	movs	r1, #3
 8000368:	4823      	ldr	r0, [pc, #140]	; (80003f8 <LCD_sendCharcter+0xd0>)
 800036a:	f000 fa85 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(data,6));
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	099b      	lsrs	r3, r3, #6
 8000372:	b2db      	uxtb	r3, r3
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	461a      	mov	r2, r3
 800037c:	2104      	movs	r1, #4
 800037e:	481e      	ldr	r0, [pc, #120]	; (80003f8 <LCD_sendCharcter+0xd0>)
 8000380:	f000 fa7a 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(data,7));
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	09db      	lsrs	r3, r3, #7
 8000388:	b2db      	uxtb	r3, r3
 800038a:	461a      	mov	r2, r3
 800038c:	2105      	movs	r1, #5
 800038e:	481a      	ldr	r0, [pc, #104]	; (80003f8 <LCD_sendCharcter+0xd0>)
 8000390:	f000 fa72 	bl	8000878 <MCAL_write_PIN>
	EN_PULS();
 8000394:	f7ff feec 	bl	8000170 <EN_PULS>
	MCAL_write_PIN(DATA_PORT, D4, GET_BIT(data,0));
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	2102      	movs	r1, #2
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <LCD_sendCharcter+0xd0>)
 80003a6:	f000 fa67 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D5, GET_BIT(data,1));
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	085b      	lsrs	r3, r3, #1
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	2103      	movs	r1, #3
 80003ba:	480f      	ldr	r0, [pc, #60]	; (80003f8 <LCD_sendCharcter+0xd0>)
 80003bc:	f000 fa5c 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D6, GET_BIT(data,2));
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	089b      	lsrs	r3, r3, #2
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	461a      	mov	r2, r3
 80003ce:	2104      	movs	r1, #4
 80003d0:	4809      	ldr	r0, [pc, #36]	; (80003f8 <LCD_sendCharcter+0xd0>)
 80003d2:	f000 fa51 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(DATA_PORT, D7, GET_BIT(data,3));
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	08db      	lsrs	r3, r3, #3
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	2105      	movs	r1, #5
 80003e6:	4804      	ldr	r0, [pc, #16]	; (80003f8 <LCD_sendCharcter+0xd0>)
 80003e8:	f000 fa46 	bl	8000878 <MCAL_write_PIN>
	EN_PULS();
 80003ec:	f7ff fec0 	bl	8000170 <EN_PULS>

#endif

}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010800 	.word	0x40010800

080003fc <LCD_sendString>:
void LCD_sendString(char *data){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	usint8_t counter=0;
 8000404:	2300      	movs	r3, #0
 8000406:	73fb      	strb	r3, [r7, #15]
	while(*data != 0){
 8000408:	e006      	b.n	8000418 <LCD_sendString+0x1c>
		LCD_sendCharcter(*data++);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	607a      	str	r2, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff88 	bl	8000328 <LCD_sendCharcter>
	while(*data != 0){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1f4      	bne.n	800040a <LCD_sendString+0xe>
	}
}
 8000420:	bf00      	nop
 8000422:	bf00      	nop
 8000424:	3710      	adds	r7, #16
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <LCD_intgerToString>:
		break;

	}
}

void LCD_intgerToString(unsigned int num){
 800042a:	b580      	push	{r7, lr}
 800042c:	b092      	sub	sp, #72	; 0x48
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
	int buff[16];
	itoa(num,buff,10);
 8000432:	f107 0308 	add.w	r3, r7, #8
 8000436:	220a      	movs	r2, #10
 8000438:	4619      	mov	r1, r3
 800043a:	6878      	ldr	r0, [r7, #4]
 800043c:	f000 fca7 	bl	8000d8e <itoa>
	LCD_sendString(buff);
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ffd9 	bl	80003fc <LCD_sendString>


}
 800044a:	bf00      	nop
 800044c:	3748      	adds	r7, #72	; 0x48
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <EXTI0_IRQHandler>:
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
	void EXTI0_IRQHandler(){
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <EXTI0_IRQHandler+0x1c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <EXTI0_IRQHandler+0x20>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a04      	ldr	r2, [pc, #16]	; (8000474 <EXTI0_IRQHandler+0x20>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6153      	str	r3, [r2, #20]
	}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000020 	.word	0x20000020
 8000474:	40010400 	.word	0x40010400

08000478 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <EXTI1_IRQHandler+0x1c>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <EXTI1_IRQHandler+0x20>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	4a04      	ldr	r2, [pc, #16]	; (8000498 <EXTI1_IRQHandler+0x20>)
 8000488:	f043 0302 	orr.w	r3, r3, #2
 800048c:	6153      	str	r3, [r2, #20]

	}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000020 	.word	0x20000020
 8000498:	40010400 	.word	0x40010400

0800049c <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <EXTI2_IRQHandler+0x1c>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <EXTI2_IRQHandler+0x20>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a04      	ldr	r2, [pc, #16]	; (80004bc <EXTI2_IRQHandler+0x20>)
 80004ac:	f043 0304 	orr.w	r3, r3, #4
 80004b0:	6153      	str	r3, [r2, #20]

	}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000020 	.word	0x20000020
 80004bc:	40010400 	.word	0x40010400

080004c0 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <EXTI3_IRQHandler+0x1c>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <EXTI3_IRQHandler+0x20>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <EXTI3_IRQHandler+0x20>)
 80004d0:	f043 0308 	orr.w	r3, r3, #8
 80004d4:	6153      	str	r3, [r2, #20]

	}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000020 	.word	0x20000020
 80004e0:	40010400 	.word	0x40010400

080004e4 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <EXTI4_IRQHandler+0x1c>)
 80004ea:	691b      	ldr	r3, [r3, #16]
 80004ec:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <EXTI4_IRQHandler+0x20>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <EXTI4_IRQHandler+0x20>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6153      	str	r3, [r2, #20]

	}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000020 	.word	0x20000020
 8000504:	40010400 	.word	0x40010400

08000508 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 800050e:	695b      	ldr	r3, [r3, #20]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	2b00      	cmp	r3, #0
 8000516:	d008      	beq.n	800052a <EXTI9_5_IRQHandler+0x22>
 8000518:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 800051e:	f043 0320 	orr.w	r3, r3, #32
 8000522:	6153      	str	r3, [r2, #20]
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <EXTI9_5_IRQHandler+0xa4>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 800052a:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000532:	2b00      	cmp	r3, #0
 8000534:	d008      	beq.n	8000548 <EXTI9_5_IRQHandler+0x40>
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 800053c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <EXTI9_5_IRQHandler+0xa4>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000550:	2b00      	cmp	r3, #0
 8000552:	d008      	beq.n	8000566 <EXTI9_5_IRQHandler+0x5e>
 8000554:	4b14      	ldr	r3, [pc, #80]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 800055a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800055e:	6153      	str	r3, [r2, #20]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <EXTI9_5_IRQHandler+0xa4>)
 8000562:	69db      	ldr	r3, [r3, #28]
 8000564:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800056e:	2b00      	cmp	r3, #0
 8000570:	d008      	beq.n	8000584 <EXTI9_5_IRQHandler+0x7c>
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 8000578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <EXTI9_5_IRQHandler+0xa4>)
 8000580:	6a1b      	ldr	r3, [r3, #32]
 8000582:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800058c:	2b00      	cmp	r3, #0
 800058e:	d008      	beq.n	80005a2 <EXTI9_5_IRQHandler+0x9a>
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <EXTI9_5_IRQHandler+0xa0>)
 8000596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059a:	6153      	str	r3, [r2, #20]
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <EXTI9_5_IRQHandler+0xa4>)
 800059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a0:	4798      	blx	r3
	}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400
 80005ac:	20000020 	.word	0x20000020

080005b0 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80005b4:	4b2d      	ldr	r3, [pc, #180]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d008      	beq.n	80005d2 <EXTI15_10_IRQHandler+0x22>
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a29      	ldr	r2, [pc, #164]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6153      	str	r3, [r2, #20]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <EXTI15_10_IRQHandler+0xc0>)
 80005ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005d0:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d008      	beq.n	80005f0 <EXTI15_10_IRQHandler+0x40>
 80005de:	4b23      	ldr	r3, [pc, #140]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a22      	ldr	r2, [pc, #136]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 80005e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <EXTI15_10_IRQHandler+0xc0>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ee:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d008      	beq.n	800060e <EXTI15_10_IRQHandler+0x5e>
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a1a      	ldr	r2, [pc, #104]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 8000602:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000606:	6153      	str	r3, [r2, #20]
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <EXTI15_10_IRQHandler+0xc0>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d008      	beq.n	800062c <EXTI15_10_IRQHandler+0x7c>
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 8000620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <EXTI15_10_IRQHandler+0xc0>)
 8000628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062a:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000634:	2b00      	cmp	r3, #0
 8000636:	d008      	beq.n	800064a <EXTI15_10_IRQHandler+0x9a>
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a0b      	ldr	r2, [pc, #44]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6153      	str	r3, [r2, #20]
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <EXTI15_10_IRQHandler+0xc0>)
 8000646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000648:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000652:	2b00      	cmp	r3, #0
 8000654:	d008      	beq.n	8000668 <EXTI15_10_IRQHandler+0xb8>
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <EXTI15_10_IRQHandler+0xbc>)
 800065c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000660:	6153      	str	r3, [r2, #20]
 8000662:	4b03      	ldr	r3, [pc, #12]	; (8000670 <EXTI15_10_IRQHandler+0xc0>)
 8000664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000666:	4798      	blx	r3

	}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40010400 	.word	0x40010400
 8000670:	20000020 	.word	0x20000020

08000674 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	2b07      	cmp	r3, #7
 8000682:	d803      	bhi.n	800068c <Get_PIN_Positon+0x18>
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	b29b      	uxth	r3, r3
 800068a:	e004      	b.n	8000696 <Get_PIN_Positon+0x22>
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	3b08      	subs	r3, #8
 8000690:	b29b      	uxth	r3, r3
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	b29b      	uxth	r3, r3
 8000696:	81fb      	strh	r3, [r7, #14]
return positon;
 8000698:	89fb      	ldrh	r3, [r7, #14]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a6b      	ldr	r2, [pc, #428]	; (8000860 <MCAL_GPIO_init+0x1bc>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d106      	bne.n	80006c4 <MCAL_GPIO_init+0x20>
 80006b6:	4b6b      	ldr	r3, [pc, #428]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a6a      	ldr	r2, [pc, #424]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	e02a      	b.n	800071a <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4a68      	ldr	r2, [pc, #416]	; (8000868 <MCAL_GPIO_init+0x1c4>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d106      	bne.n	80006da <MCAL_GPIO_init+0x36>
 80006cc:	4b65      	ldr	r3, [pc, #404]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a64      	ldr	r2, [pc, #400]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	e01f      	b.n	800071a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a63      	ldr	r2, [pc, #396]	; (800086c <MCAL_GPIO_init+0x1c8>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <MCAL_GPIO_init+0x4c>
 80006e2:	4b60      	ldr	r3, [pc, #384]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a5f      	ldr	r2, [pc, #380]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 80006e8:	f043 0310 	orr.w	r3, r3, #16
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	e014      	b.n	800071a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a5f      	ldr	r2, [pc, #380]	; (8000870 <MCAL_GPIO_init+0x1cc>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <MCAL_GPIO_init+0x62>
 80006f8:	4b5a      	ldr	r3, [pc, #360]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a59      	ldr	r2, [pc, #356]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 80006fe:	f043 0320 	orr.w	r3, r3, #32
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	e009      	b.n	800071a <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4a5a      	ldr	r2, [pc, #360]	; (8000874 <MCAL_GPIO_init+0x1d0>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d105      	bne.n	800071a <MCAL_GPIO_init+0x76>
 800070e:	4b55      	ldr	r3, [pc, #340]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a54      	ldr	r2, [pc, #336]	; (8000864 <MCAL_GPIO_init+0x1c0>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000718:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	b29b      	uxth	r3, r3
 8000720:	2b07      	cmp	r3, #7
 8000722:	d801      	bhi.n	8000728 <MCAL_GPIO_init+0x84>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	e001      	b.n	800072c <MCAL_GPIO_init+0x88>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3304      	adds	r3, #4
 800072c:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff9d 	bl	8000674 <Get_PIN_Positon>
 800073a:	4603      	mov	r3, r0
 800073c:	461a      	mov	r2, r3
 800073e:	230f      	movs	r3, #15
 8000740:	4093      	lsls	r3, r2
 8000742:	43da      	mvns	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	401a      	ands	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	789b      	ldrb	r3, [r3, #2]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00e      	beq.n	8000776 <MCAL_GPIO_init+0xd2>
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b01      	cmp	r3, #1
 8000760:	d009      	beq.n	8000776 <MCAL_GPIO_init+0xd2>
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	789b      	ldrb	r3, [r3, #2]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b02      	cmp	r3, #2
 800076a:	d004      	beq.n	8000776 <MCAL_GPIO_init+0xd2>
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	789b      	ldrb	r3, [r3, #2]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b03      	cmp	r3, #3
 8000774:	d156      	bne.n	8000824 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	789b      	ldrb	r3, [r3, #2]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b03      	cmp	r3, #3
 800077e:	d11c      	bne.n	80007ba <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	b29b      	uxth	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff ff74 	bl	8000674 <Get_PIN_Positon>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	2308      	movs	r3, #8
 8000792:	fa03 f202 	lsl.w	r2, r3, r2
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	431a      	orrs	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	2301      	movs	r3, #1
 80007aa:	4093      	lsls	r3, r2
 80007ac:	43da      	mvns	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	401a      	ands	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80007b8:	e04d      	b.n	8000856 <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	789b      	ldrb	r3, [r3, #2]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d11c      	bne.n	80007fe <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff52 	bl	8000674 <Get_PIN_Positon>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	2308      	movs	r3, #8
 80007d6:	fa03 f202 	lsl.w	r2, r3, r2
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	431a      	orrs	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	2301      	movs	r3, #1
 80007ee:	fa03 f202 	lsl.w	r2, r3, r2
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	68db      	ldr	r3, [r3, #12]
 80007f6:	431a      	orrs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 80007fc:	e02b      	b.n	8000856 <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	789b      	ldrb	r3, [r3, #2]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	009c      	lsls	r4, r3, #2
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b29b      	uxth	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff31 	bl	8000674 <Get_PIN_Positon>
 8000812:	4603      	mov	r3, r0
 8000814:	fa04 f203 	lsl.w	r2, r4, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	431a      	orrs	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8000822:	e018      	b.n	8000856 <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	3b04      	subs	r3, #4
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	78d2      	ldrb	r2, [r2, #3]
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	ea43 0402 	orr.w	r4, r3, r2
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff18 	bl	8000674 <Get_PIN_Positon>
 8000844:	4603      	mov	r3, r0
 8000846:	fa04 f203 	lsl.w	r2, r4, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	431a      	orrs	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	601a      	str	r2, [r3, #0]

	}

}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	bf00      	nop
 8000860:	40010800 	.word	0x40010800
 8000864:	40021000 	.word	0x40021000
 8000868:	40010c00 	.word	0x40010c00
 800086c:	40011000 	.word	0x40011000
 8000870:	40011400 	.word	0x40011400
 8000874:	40011800 	.word	0x40011800

08000878 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	807b      	strh	r3, [r7, #2]
 8000884:	4613      	mov	r3, r2
 8000886:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8000888:	787b      	ldrb	r3, [r7, #1]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10b      	bne.n	80008a8 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	b29b      	uxth	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	2301      	movs	r3, #1
 8000898:	fa03 f202 	lsl.w	r2, r3, r2
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	431a      	orrs	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	60da      	str	r2, [r3, #12]

	}



}
 80008a6:	e00a      	b.n	80008be <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	2301      	movs	r3, #1
 80008b0:	4093      	lsls	r3, r2
 80008b2:	43da      	mvns	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	401a      	ands	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	60da      	str	r2, [r3, #12]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SPI1_IRQHandler>:


}


void SPI1_IRQHandler(void){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4905      	ldr	r1, [pc, #20]	; (80008e8 <SPI1_IRQHandler+0x20>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f80c 	bl	80008f0 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 80008d8:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SPI1_IRQHandler+0x24>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	7938      	ldrb	r0, [r7, #4]
 80008de:	4798      	blx	r3
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013000 	.word	0x40013000
 80008ec:	2000005c 	.word	0x2000005c

080008f0 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00f      	beq.n	8000928 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	7813      	ldrb	r3, [r2, #0]
 800090c:	f36f 0300 	bfc	r3, #0, #1
 8000910:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	7813      	ldrb	r3, [r2, #0]
 8000916:	f043 0302 	orr.w	r3, r3, #2
 800091a:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	7913      	ldrb	r3, [r2, #4]
 8000920:	f36f 1386 	bfc	r3, #6, #1
 8000924:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8000926:	e015      	b.n	8000954 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00e      	beq.n	8000954 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	7813      	ldrb	r3, [r2, #0]
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7813      	ldrb	r3, [r2, #0]
 8000944:	f36f 0341 	bfc	r3, #1, #1
 8000948:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	7913      	ldrb	r3, [r2, #4]
 800094e:	f36f 13c7 	bfc	r3, #7, #1
 8000952:	7113      	strb	r3, [r2, #4]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
	...

08000960 <Timer2_init>:

#include "Timer.h"


void Timer2_init(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
	RCC_APB1ENR |=(1<<0);     //Enable Rcc for tim2
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <Timer2_init+0x44>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <Timer2_init+0x44>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]
	TIM2_PSC = 7;             //Clk_input=(8M/(7+1))=1MHZ
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <Timer2_init+0x48>)
 8000972:	2207      	movs	r2, #7
 8000974:	601a      	str	r2, [r3, #0]
	TIM2_ARR = 0xC350;        //to make interrupt after 50000 tike(50000*10^-6)=0.05s
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <Timer2_init+0x4c>)
 8000978:	f24c 3250 	movw	r2, #50000	; 0xc350
 800097c:	601a      	str	r2, [r3, #0]
	TIM2_CR1 |=(1<<0);
 800097e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6013      	str	r3, [r2, #0]
	while(!(TIM2_SR)&(1<<0));
 800098e:	bf00      	nop
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <Timer2_init+0x50>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0fb      	beq.n	8000990 <Timer2_init+0x30>
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	4002101c 	.word	0x4002101c
 80009a8:	40000028 	.word	0x40000028
 80009ac:	4000002c 	.word	0x4000002c
 80009b0:	40000010 	.word	0x40000010

080009b4 <dus>:

void dus(int us)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	TIM2_CNT=0;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <dus+0x28>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
	while(TIM2_CNT<us);
 80009c2:	bf00      	nop
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <dus+0x28>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d3fa      	bcc.n	80009c4 <dus+0x10>
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40000024 	.word	0x40000024

080009e0 <dms>:

void dms(int ms)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	int i=0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
	for(i=0;i<ms;i++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	e006      	b.n	8000a00 <dms+0x20>
	{
		dus(1000);
 80009f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f6:	f7ff ffdd 	bl	80009b4 <dus>
	for(i=0;i<ms;i++)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3301      	adds	r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf4      	blt.n	80009f2 <dms+0x12>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <ERROR_HANDLER>:


#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;
void ERROR_HANDLER(){
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
	while(1);
 8000a16:	e7fe      	b.n	8000a16 <ERROR_HANDLER+0x4>

08000a18 <MCAL_SET_TIMx_GPIO>:
}

void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	PIN_config pin={PIN_8,OUTPUT_AF_PP,SPEED_10};
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MCAL_SET_TIMx_GPIO+0x24>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(GPIOA, &pin);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MCAL_SET_TIMx_GPIO+0x28>)
 8000a2e:	f7ff fe39 	bl	80006a4 <MCAL_GPIO_init>
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08000e78 	.word	0x08000e78
 8000a40:	40010800 	.word	0x40010800

08000a44 <TIMER_1_CTC_start>:
		while(!TIMx->SR.BIT_NAME.UIF);
		TIMx->SR.BIT_NAME.UIF=0;
	}

}
void TIMER_1_CTC_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting,Compare_mode_sitting* CTC_Sitting){
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
	g_Sitting=(* Sitting);
 8000a50:	4a45      	ldr	r2, [pc, #276]	; (8000b68 <TIMER_1_CTC_start+0x124>)
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	4614      	mov	r4, r2
 8000a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	g_TIMX=TIMx;
 8000a5c:	4a43      	ldr	r2, [pc, #268]	; (8000b6c <TIMER_1_CTC_start+0x128>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6013      	str	r3, [r2, #0]
	if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	4a42      	ldr	r2, [pc, #264]	; (8000b70 <TIMER_1_CTC_start+0x12c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d106      	bne.n	8000a78 <TIMER_1_CTC_start+0x34>
 8000a6a:	4b42      	ldr	r3, [pc, #264]	; (8000b74 <TIMER_1_CTC_start+0x130>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	4a41      	ldr	r2, [pc, #260]	; (8000b74 <TIMER_1_CTC_start+0x130>)
 8000a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a74:	6193      	str	r3, [r2, #24]
 8000a76:	e009      	b.n	8000a8c <TIMER_1_CTC_start+0x48>
	else if(TIMx== TIM8) RCC->APB2ENR|=(1<<13);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4a3f      	ldr	r2, [pc, #252]	; (8000b78 <TIMER_1_CTC_start+0x134>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d105      	bne.n	8000a8c <TIMER_1_CTC_start+0x48>
 8000a80:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <TIMER_1_CTC_start+0x130>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a3b      	ldr	r2, [pc, #236]	; (8000b74 <TIMER_1_CTC_start+0x130>)
 8000a86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a8a:	6193      	str	r3, [r2, #24]



	// 2.select the pre vale
	TIMx->PSC=Sitting->TIME_PSC;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->ARR=Sitting->TIME_ARR;
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	885b      	ldrh	r3, [r3, #2]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	//	TIMx->CR1.BIT_NAME.ARPE=1;

		TIMx->RCR=Sitting->TIME_RCR;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	631a      	str	r2, [r3, #48]	; 0x30
	//1.Select the mode CMS[1:0]
	switch(Sitting->mode){
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	7a5b      	ldrb	r3, [r3, #9]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d12d      	bne.n	8000b0e <TIMER_1_CTC_start+0xca>
– Write OCxM = 011 to toggle OCx output pin when CNT matches CCRx
– Write OCxPE = 0 to disable preload register
– Write CCxP = 0 to select active high polarity
– Write CCxE = 1 to enable the output
5. Enable the counter by setting the CEN bit in the TIMx_CR1 register.*/
		TIMx->CCR1=Sitting->TIME_CCR;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	88db      	ldrh	r3, [r3, #6]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34
		TIMx->CCMR1.Compare_BIT_NAME.OC1M=CTC_Sitting->TIM1_CTC_MD;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	b2d9      	uxtb	r1, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	6993      	ldr	r3, [r2, #24]
 8000aca:	f361 1306 	bfi	r3, r1, #4, #3
 8000ace:	6193      	str	r3, [r2, #24]
		TIMx->CCMR1.Compare_BIT_NAME.OC1PE=CTC_Sitting->TIM1_CTC_PE;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	785b      	ldrb	r3, [r3, #1]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	b2d9      	uxtb	r1, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	6993      	ldr	r3, [r2, #24]
 8000ade:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
		TIMx->CCER.BIT_NAME.CC1P=CTC_Sitting->TIM1_POL;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	789b      	ldrb	r3, [r3, #2]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	b2d9      	uxtb	r1, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	6a13      	ldr	r3, [r2, #32]
 8000af2:	f361 0341 	bfi	r3, r1, #1, #1
 8000af6:	6213      	str	r3, [r2, #32]
		TIMx->BDTR.BIT_NAME.MOE=1;
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
//		TIMx->BDTR.BIT_NAME.OSSR=1;
//		TIMx->BDTR.BIT_NAME.OSSI=1;

		TIMx->CCER.BIT_NAME.CC1E=1;
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	6a13      	ldr	r3, [r2, #32]
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6213      	str	r3, [r2, #32]

		break;
 8000b0c:	e002      	b.n	8000b14 <TIMER_1_CTC_start+0xd0>

	default:
		ERROR_HANDLER();
 8000b0e:	f7ff ff80 	bl	8000a12 <ERROR_HANDLER>
		break;
 8000b12:	bf00      	nop
	}
	MCAL_SET_TIMx_GPIO(TIMx);
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff ff7f 	bl	8000a18 <MCAL_SET_TIMx_GPIO>
	TIMx->CR1.BIT_NAME.CEN=1;
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	6813      	ldr	r3, [r2, #0]
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

	if(Sitting->INT_EN_DIS==INT_EN){
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	7a1b      	ldrb	r3, [r3, #8]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d10b      	bne.n	8000b44 <TIMER_1_CTC_start+0x100>
		TIMx->DIER.BIT_NAME.CC1IE=1;
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	68d3      	ldr	r3, [r2, #12]
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	60d3      	str	r3, [r2, #12]
		NVIC_ISER0|=(1<<27);
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <TIMER_1_CTC_start+0x138>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <TIMER_1_CTC_start+0x138>)
 8000b3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b40:	6013      	str	r3, [r2, #0]
	}else{
		while(!TIMx->SR.BIT_NAME.CC1IF);
		TIMx->SR.BIT_NAME.CC1IF=0;
	}

}
 8000b42:	e00c      	b.n	8000b5e <TIMER_1_CTC_start+0x11a>
		while(!TIMx->SR.BIT_NAME.CC1IF);
 8000b44:	bf00      	nop
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	691b      	ldr	r3, [r3, #16]
 8000b4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f8      	beq.n	8000b46 <TIMER_1_CTC_start+0x102>
		TIMx->SR.BIT_NAME.CC1IF=0;
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	6913      	ldr	r3, [r2, #16]
 8000b58:	f36f 0341 	bfc	r3, #1, #1
 8000b5c:	6113      	str	r3, [r2, #16]
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd90      	pop	{r4, r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000007c 	.word	0x2000007c
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	40012c00 	.word	0x40012c00
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40013400 	.word	0x40013400
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <TIM1_UP_IRQHandler+0x1c>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <TIM1_UP_IRQHandler+0x20>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	6913      	ldr	r3, [r2, #16]
 8000b90:	f36f 0300 	bfc	r3, #0, #1
 8000b94:	6113      	str	r3, [r2, #16]

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000007c 	.word	0x2000007c
 8000ba0:	2000008c 	.word	0x2000008c

08000ba4 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <TIM1_CC_IRQHandler+0x1c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <TIM1_CC_IRQHandler+0x20>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	6913      	ldr	r3, [r2, #16]
 8000bb4:	f36f 0341 	bfc	r3, #1, #1
 8000bb8:	6113      	str	r3, [r2, #16]

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000007c 	.word	0x2000007c
 8000bc4:	2000008c 	.word	0x2000008c

08000bc8 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <TIM1_BRK_IRQHandler+0x1c>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <TIM1_BRK_IRQHandler+0x20>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	6913      	ldr	r3, [r2, #16]
 8000bd8:	f36f 0300 	bfc	r3, #0, #1
 8000bdc:	6113      	str	r3, [r2, #16]

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000007c 	.word	0x2000007c
 8000be8:	2000008c 	.word	0x2000008c

08000bec <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <TIM1_TRG_COM_IRQHandler+0x1c>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <TIM1_TRG_COM_IRQHandler+0x20>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	6913      	ldr	r3, [r2, #16]
 8000bfc:	f36f 0300 	bfc	r3, #0, #1
 8000c00:	6113      	str	r3, [r2, #16]

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000007c 	.word	0x2000007c
 8000c0c:	2000008c 	.word	0x2000008c

08000c10 <USART1_IRQHandler>:
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
void USART1_IRQHandler(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8000c14:	4b02      	ldr	r3, [pc, #8]	; (8000c20 <USART1_IRQHandler+0x10>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4798      	blx	r3
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000090 	.word	0x20000090

08000c24 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8000c28:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <USART2_IRQHandler+0x10>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000090 	.word	0x20000090

08000c38 <USART3_IRQHandler>:
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <USART3_IRQHandler+0x10>)
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	4798      	blx	r3
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000090 	.word	0x20000090

08000c4c <Toggel>:
#endif
#include "Timer1_8.h"
#include "GPIO_Driver.h"
#include "LCD.h"
	uint32_t sec_s;
void Toggel(){
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	//MCAL_TOGGLE_PIN(GPIOA, PIN_0);
	sec_s++;
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <Toggel+0x18>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	3301      	adds	r3, #1
 8000c56:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <Toggel+0x18>)
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200000c0 	.word	0x200000c0

08000c68 <main>:
int main(void)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=(1<<2);
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <main+0x88>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <main+0x88>)
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	6193      	str	r3, [r2, #24]
	PIN_config PIN_Config={PIN_9,OUTPUT_PP,SPEED_2};
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <main+0x8c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOA, &PIN_Config);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	481c      	ldr	r0, [pc, #112]	; (8000cf8 <main+0x90>)
 8000c88:	f7ff fd0c 	bl	80006a4 <MCAL_GPIO_init>
	PIN_Config=(PIN_config){PIN_10,OUTPUT_PP,SPEED_2};
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <main+0x94>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOA, &PIN_Config);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <main+0x90>)
 8000c9a:	f7ff fd03 	bl	80006a4 <MCAL_GPIO_init>
	MCAL_write_PIN(GPIOA, PIN_9, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2109      	movs	r1, #9
 8000ca2:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <main+0x90>)
 8000ca4:	f7ff fde8 	bl	8000878 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOA, PIN_10, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	210a      	movs	r1, #10
 8000cac:	4812      	ldr	r0, [pc, #72]	; (8000cf8 <main+0x90>)
 8000cae:	f7ff fde3 	bl	8000878 <MCAL_write_PIN>



	Timer2_init();
 8000cb2:	f7ff fe55 	bl	8000960 <Timer2_init>
	LCD_init();
 8000cb6:	f7ff fad9 	bl	800026c <LCD_init>
	TIMERx_type SIT={799,83,0,83,INT_EN,Compare_output,Toggel};
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <main+0x98>)
 8000cbc:	f107 0408 	add.w	r4, r7, #8
 8000cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Compare_mode_sitting CTC_Sitting={PWM_AL,CTC_Preload_DIS,ACTIVE_H};
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	713b      	strb	r3, [r7, #4]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	717b      	strb	r3, [r7, #5]
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71bb      	strb	r3, [r7, #6]
//	PIN_config PIN={PIN_0,OUTPUT_PP,SPEED_10};
//	MCAL_GPIO_init(GPIOA, &PIN);
	TIMER_1_CTC_start(TIM1, &SIT, &CTC_Sitting);
 8000cd2:	1d3a      	adds	r2, r7, #4
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <main+0x9c>)
 8000cdc:	f7ff feb2 	bl	8000a44 <TIMER_1_CTC_start>
//		TIMER_1_8_start(TIM1,&SIT);
//		dms(100);
//		}

		//		MCAL_TOGGLE_PIN(GPIOA, PIN_0);
		LCD_clearScreen();
 8000ce0:	f7ff fb1a 	bl	8000318 <LCD_clearScreen>
		LCD_intgerToString(sec_s);
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <main+0xa0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fb9e 	bl	800042a <LCD_intgerToString>
		LCD_clearScreen();
 8000cee:	e7f7      	b.n	8000ce0 <main+0x78>
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	08000e7c 	.word	0x08000e7c
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	08000e80 	.word	0x08000e80
 8000d00:	08000e84 	.word	0x08000e84
 8000d04:	40012c00 	.word	0x40012c00
 8000d08:	200000c0 	.word	0x200000c0

08000d0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d3a:	f000 f86d 	bl	8000e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff ff93 	bl	8000c68 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   r0, =_estack
 8000d44:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d50:	08000ec4 	.word	0x08000ec4
  ldr r2, =_sbss
 8000d54:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d58:	200000c4 	.word	0x200000c4

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>

08000d5e <__itoa>:
 8000d5e:	1e93      	subs	r3, r2, #2
 8000d60:	2b22      	cmp	r3, #34	; 0x22
 8000d62:	b510      	push	{r4, lr}
 8000d64:	460c      	mov	r4, r1
 8000d66:	d904      	bls.n	8000d72 <__itoa+0x14>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	461c      	mov	r4, r3
 8000d6c:	700b      	strb	r3, [r1, #0]
 8000d6e:	4620      	mov	r0, r4
 8000d70:	bd10      	pop	{r4, pc}
 8000d72:	2a0a      	cmp	r2, #10
 8000d74:	d109      	bne.n	8000d8a <__itoa+0x2c>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	da07      	bge.n	8000d8a <__itoa+0x2c>
 8000d7a:	232d      	movs	r3, #45	; 0x2d
 8000d7c:	700b      	strb	r3, [r1, #0]
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4240      	negs	r0, r0
 8000d82:	4421      	add	r1, r4
 8000d84:	f000 f806 	bl	8000d94 <__utoa>
 8000d88:	e7f1      	b.n	8000d6e <__itoa+0x10>
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e7f9      	b.n	8000d82 <__itoa+0x24>

08000d8e <itoa>:
 8000d8e:	f7ff bfe6 	b.w	8000d5e <__itoa>
	...

08000d94 <__utoa>:
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d96:	b08b      	sub	sp, #44	; 0x2c
 8000d98:	4605      	mov	r5, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	466e      	mov	r6, sp
 8000d9e:	4c1d      	ldr	r4, [pc, #116]	; (8000e14 <__utoa+0x80>)
 8000da0:	f104 0c20 	add.w	ip, r4, #32
 8000da4:	4637      	mov	r7, r6
 8000da6:	6820      	ldr	r0, [r4, #0]
 8000da8:	6861      	ldr	r1, [r4, #4]
 8000daa:	3408      	adds	r4, #8
 8000dac:	c703      	stmia	r7!, {r0, r1}
 8000dae:	4564      	cmp	r4, ip
 8000db0:	463e      	mov	r6, r7
 8000db2:	d1f7      	bne.n	8000da4 <__utoa+0x10>
 8000db4:	7921      	ldrb	r1, [r4, #4]
 8000db6:	6820      	ldr	r0, [r4, #0]
 8000db8:	7139      	strb	r1, [r7, #4]
 8000dba:	1e91      	subs	r1, r2, #2
 8000dbc:	2922      	cmp	r1, #34	; 0x22
 8000dbe:	6038      	str	r0, [r7, #0]
 8000dc0:	f04f 0100 	mov.w	r1, #0
 8000dc4:	d904      	bls.n	8000dd0 <__utoa+0x3c>
 8000dc6:	7019      	strb	r1, [r3, #0]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4618      	mov	r0, r3
 8000dcc:	b00b      	add	sp, #44	; 0x2c
 8000dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd0:	1e58      	subs	r0, r3, #1
 8000dd2:	4684      	mov	ip, r0
 8000dd4:	fbb5 f7f2 	udiv	r7, r5, r2
 8000dd8:	fb02 5617 	mls	r6, r2, r7, r5
 8000ddc:	3628      	adds	r6, #40	; 0x28
 8000dde:	446e      	add	r6, sp
 8000de0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8000de4:	460c      	mov	r4, r1
 8000de6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8000dea:	462e      	mov	r6, r5
 8000dec:	42b2      	cmp	r2, r6
 8000dee:	463d      	mov	r5, r7
 8000df0:	f101 0101 	add.w	r1, r1, #1
 8000df4:	d9ee      	bls.n	8000dd4 <__utoa+0x40>
 8000df6:	2200      	movs	r2, #0
 8000df8:	545a      	strb	r2, [r3, r1]
 8000dfa:	1919      	adds	r1, r3, r4
 8000dfc:	1aa5      	subs	r5, r4, r2
 8000dfe:	42aa      	cmp	r2, r5
 8000e00:	dae3      	bge.n	8000dca <__utoa+0x36>
 8000e02:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8000e06:	780e      	ldrb	r6, [r1, #0]
 8000e08:	3201      	adds	r2, #1
 8000e0a:	7006      	strb	r6, [r0, #0]
 8000e0c:	f801 5901 	strb.w	r5, [r1], #-1
 8000e10:	e7f4      	b.n	8000dfc <__utoa+0x68>
 8000e12:	bf00      	nop
 8000e14:	08000e94 	.word	0x08000e94

08000e18 <__libc_init_array>:
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4d0c      	ldr	r5, [pc, #48]	; (8000e50 <__libc_init_array+0x38>)
 8000e1e:	4c0d      	ldr	r4, [pc, #52]	; (8000e54 <__libc_init_array+0x3c>)
 8000e20:	1b64      	subs	r4, r4, r5
 8000e22:	10a4      	asrs	r4, r4, #2
 8000e24:	42a6      	cmp	r6, r4
 8000e26:	d109      	bne.n	8000e3c <__libc_init_array+0x24>
 8000e28:	f000 f81a 	bl	8000e60 <_init>
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	4d0a      	ldr	r5, [pc, #40]	; (8000e58 <__libc_init_array+0x40>)
 8000e30:	4c0a      	ldr	r4, [pc, #40]	; (8000e5c <__libc_init_array+0x44>)
 8000e32:	1b64      	subs	r4, r4, r5
 8000e34:	10a4      	asrs	r4, r4, #2
 8000e36:	42a6      	cmp	r6, r4
 8000e38:	d105      	bne.n	8000e46 <__libc_init_array+0x2e>
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e40:	4798      	blx	r3
 8000e42:	3601      	adds	r6, #1
 8000e44:	e7ee      	b.n	8000e24 <__libc_init_array+0xc>
 8000e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4a:	4798      	blx	r3
 8000e4c:	3601      	adds	r6, #1
 8000e4e:	e7f2      	b.n	8000e36 <__libc_init_array+0x1e>
 8000e50:	08000ebc 	.word	0x08000ebc
 8000e54:	08000ebc 	.word	0x08000ebc
 8000e58:	08000ebc 	.word	0x08000ebc
 8000e5c:	08000ec0 	.word	0x08000ec0

08000e60 <_init>:
 8000e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e62:	bf00      	nop
 8000e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e66:	bc08      	pop	{r3}
 8000e68:	469e      	mov	lr, r3
 8000e6a:	4770      	bx	lr

08000e6c <_fini>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr
